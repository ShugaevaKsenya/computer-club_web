{"ast":null,"code":"const API_BASE_URL = 'http://127.0.0.1:8000/api';\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      credentials: 'include',\n      ...options\n    };\n    if (options.body && config.method !== 'GET') {\n      config.body = JSON.stringify(options.body);\n    }\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Users API\n  async getUsers() {\n    return this.request('/users');\n  }\n  async createUser(userData) {\n    return this.request('/users', {\n      method: 'POST',\n      body: userData\n    });\n  }\n\n  // Computers API\n  async getComputers() {\n    return this.request('/computers');\n  }\n  async getComputer(id) {\n    return this.request(`/computers/${id}`);\n  }\n  async getComputerWithDetails(id) {\n    return this.request(`/computers/${id}?with=specs,position`);\n  }\n\n  // Computer Specs API\n  async getComputerSpecs() {\n    return this.request('api/computer-specs');\n  }\n  async getComputerSpec(id) {\n    return this.request(`/computer_specs/${id}`);\n  }\n\n  // Computer Positions API\n  async getComputerPositions() {\n    return this.request('/computer_positions');\n  }\n  async getComputerPosition(id) {\n    return this.request(`/computer_positions/${id}`);\n  }\n\n  // Bookings API\n  async getBookings() {\n    return this.request('/bookings');\n  }\n  async createBooking(bookingData) {\n    return this.request('/bookings', {\n      method: 'POST',\n      body: bookingData\n    });\n  }\n  async getBooking(id) {\n    return this.request(`/bookings/${id}`);\n  }\n\n  // Foods API\n  async getFoods() {\n    return this.request('/foods');\n  }\n  async getFood(id) {\n    return this.request(`/foods/${id}`);\n  }\n\n  // Additional Menu API (связь бронирований с едой)\n  async addFoodToBooking(bookingId, foodData) {\n    return this.request('/additional_menu', {\n      method: 'POST',\n      body: {\n        booking_id: bookingId,\n        ...foodData\n      }\n    });\n  }\n\n  // Payments API\n  async createPayment(paymentData) {\n    return this.request('/payments', {\n      method: 'POST',\n      body: paymentData\n    });\n  }\n  async getPayment(id) {\n    return this.request(`/payments/${id}`);\n  }\n\n  // Tariffs API\n  async getTariffs() {\n    return this.request('/tariffs');\n  }\n  async getTariff(id) {\n    return this.request(`/tariffs/${id}`);\n  }\n\n  // Codes API (промокоды)\n  async validateCode(code) {\n    return this.request('/codes/validate', {\n      method: 'POST',\n      body: {\n        code\n      }\n    });\n  }\n\n  // Clubs API\n  async getClubs() {\n    return this.request('/clubs');\n  }\n  async getClub(id) {\n    return this.request(`/clubs/${id}`);\n  }\n\n  // Комплексные запросы\n  async getAvailableComputers(date, timeFrom, timeTo) {\n    return this.request(`/computers/available?date=${date}&time_from=${timeFrom}&time_to=${timeTo}`);\n  }\n  async getUserBookings(userId) {\n    return this.request(`/users/${userId}/bookings`);\n  }\n}\nexport const apiService = new ApiService();","map":{"version":3,"names":["API_BASE_URL","ApiService","constructor","baseURL","request","endpoint","options","url","config","headers","credentials","body","method","JSON","stringify","response","fetch","ok","Error","status","json","error","console","getUsers","createUser","userData","getComputers","getComputer","id","getComputerWithDetails","getComputerSpecs","getComputerSpec","getComputerPositions","getComputerPosition","getBookings","createBooking","bookingData","getBooking","getFoods","getFood","addFoodToBooking","bookingId","foodData","booking_id","createPayment","paymentData","getPayment","getTariffs","getTariff","validateCode","code","getClubs","getClub","getAvailableComputers","date","timeFrom","timeTo","getUserBookings","userId","apiService"],"sources":["C:/Users/Ksenia/Desktop/комп_клуб/gaming-club-react/src/services/Api.js"],"sourcesContent":["const API_BASE_URL = 'http://127.0.0.1:8000/api';\r\n\r\nclass ApiService {\r\n    constructor() {\r\n        this.baseURL = API_BASE_URL;\r\n    }\r\n\r\n    async request(endpoint, options = {}) {\r\n        const url = `${this.baseURL}${endpoint}`;\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json',\r\n            },\r\n            credentials: 'include',\r\n            ...options,\r\n        };\r\n\r\n        if (options.body && config.method !== 'GET') {\r\n            config.body = JSON.stringify(options.body);\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(url, config);\r\n            \r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error('API request failed:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Users API\r\n    async getUsers() {\r\n        return this.request('/users');\r\n    }\r\n\r\n    async createUser(userData) {\r\n        return this.request('/users', {\r\n            method: 'POST',\r\n            body: userData\r\n        });\r\n    }\r\n\r\n    // Computers API\r\n    async getComputers() {\r\n        return this.request('/computers');\r\n    }\r\n\r\n    async getComputer(id) {\r\n        return this.request(`/computers/${id}`);\r\n    }\r\n\r\n    async getComputerWithDetails(id) {\r\n        return this.request(`/computers/${id}?with=specs,position`);\r\n    }\r\n\r\n    // Computer Specs API\r\n    async getComputerSpecs() {\r\n        return this.request('api/computer-specs');\r\n    }\r\n\r\n    async getComputerSpec(id) {\r\n        return this.request(`/computer_specs/${id}`);\r\n    }\r\n\r\n    // Computer Positions API\r\n    async getComputerPositions() {\r\n        return this.request('/computer_positions');\r\n    }\r\n\r\n    async getComputerPosition(id) {\r\n        return this.request(`/computer_positions/${id}`);\r\n    }\r\n\r\n    // Bookings API\r\n    async getBookings() {\r\n        return this.request('/bookings');\r\n    }\r\n\r\n    async createBooking(bookingData) {\r\n        return this.request('/bookings', {\r\n            method: 'POST',\r\n            body: bookingData\r\n        });\r\n    }\r\n\r\n    async getBooking(id) {\r\n        return this.request(`/bookings/${id}`);\r\n    }\r\n\r\n    // Foods API\r\n    async getFoods() {\r\n        return this.request('/foods');\r\n    }\r\n\r\n    async getFood(id) {\r\n        return this.request(`/foods/${id}`);\r\n    }\r\n\r\n    // Additional Menu API (связь бронирований с едой)\r\n    async addFoodToBooking(bookingId, foodData) {\r\n        return this.request('/additional_menu', {\r\n            method: 'POST',\r\n            body: {\r\n                booking_id: bookingId,\r\n                ...foodData\r\n            }\r\n        });\r\n    }\r\n\r\n    // Payments API\r\n    async createPayment(paymentData) {\r\n        return this.request('/payments', {\r\n            method: 'POST',\r\n            body: paymentData\r\n        });\r\n    }\r\n\r\n    async getPayment(id) {\r\n        return this.request(`/payments/${id}`);\r\n    }\r\n\r\n    // Tariffs API\r\n    async getTariffs() {\r\n        return this.request('/tariffs');\r\n    }\r\n\r\n    async getTariff(id) {\r\n        return this.request(`/tariffs/${id}`);\r\n    }\r\n\r\n    // Codes API (промокоды)\r\n    async validateCode(code) {\r\n        return this.request('/codes/validate', {\r\n            method: 'POST',\r\n            body: { code }\r\n        });\r\n    }\r\n\r\n    // Clubs API\r\n    async getClubs() {\r\n        return this.request('/clubs');\r\n    }\r\n\r\n    async getClub(id) {\r\n        return this.request(`/clubs/${id}`);\r\n    }\r\n\r\n    // Комплексные запросы\r\n    async getAvailableComputers(date, timeFrom, timeTo) {\r\n        return this.request(`/computers/available?date=${date}&time_from=${timeFrom}&time_to=${timeTo}`);\r\n    }\r\n\r\n    async getUserBookings(userId) {\r\n        return this.request(`/users/${userId}/bookings`);\r\n    }\r\n}\r\n\r\nexport const apiService = new ApiService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}