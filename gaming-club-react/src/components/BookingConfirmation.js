import React, { useState, useEffect } from 'react';
import { apiService } from '../services/Api';
import '../styles/BookingConfirmation.css';
import { useNavigate } from 'react-router-dom';
const BookingConfirmation = () => {
  const [bookingData, setBookingData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [processingPayment, setProcessingPayment] = useState(false);
  const [promoCode, setPromoCode] = useState('');
  const [appliedPromoCode, setAppliedPromoCode] = useState(null);
  const [tariffData, setTariffData] = useState(null);
  const [computers, setComputers] = useState([]);
  const [foods, setFoods] = useState([]);
  const [clubs, setClubs] = useState([]);
  const navigate = useNavigate();
  const [showPaymentForm, setShowPaymentForm] = useState(false);
const [cardData, setCardData] = useState({
  number: '',
  expiry: '',
  cvv: '',
  bank: 'sberbank'
});
const [cardError, setCardError] = useState('');
const [paymentSuccess, setPaymentSuccess] = useState(false);
  useEffect(() => {
    const loadBookingData = () => {
      try {
        const savedData = localStorage.getItem('lastBooking');
        console.log('üì¶ Loading booking data from localStorage:', savedData);
        
        if (savedData) {
          const parsedData = JSON.parse(savedData);
          setBookingData(parsedData);
          console.log('‚úÖ Booking data loaded successfully');
        } else {
          console.warn('‚ùå No booking data found in localStorage');
        }
      } catch (error) {
        console.error('‚ùå Error loading booking data:', error);
      } finally {
        setLoading(false);
      }
    };

    loadBookingData();
  }, []);

  useEffect(() => {
    const loadAdditionalData = async () => {
      if (!bookingData) return;
      
      try {
        console.log('üîÑ Loading additional data from API...');
        
        const [foodsData, computersData, clubsData] = await Promise.all([
          apiService.getFoods().catch(error => {
            console.error('‚ùå Error loading foods:', error);
            return [];
          }),
          apiService.getComputers().catch(error => {
            console.error('‚ùå Error loading computers:', error);
            return [];
          }),
          apiService.getClubs().catch(error => {
            console.error('‚ùå Error loading clubs:', error);
            return [];
          })
        ]);
        
        console.log('üìä API Data loaded:', {
          foods: foodsData.length,
          computers: computersData.length,
          clubs: clubsData.length
        });
        
        setFoods(foodsData);
        setComputers(computersData);
        setClubs(clubsData);
        
        try {
          let tariff;
          try {
            tariff = await apiService.getTariff(1);
          } catch (e) {
            console.log('‚ö†Ô∏è Trying alternative tariff endpoint...');
            tariff = await apiService.request('/tariffs/1');
          }
          console.log('üí∞ Tariff data loaded:', tariff);
          setTariffData(tariff);
        } catch (tariffError) {
          console.error('‚ùå Error loading tariff:', tariffError);
          setTariffData({ coefficient: 1 });
        }
        
      } catch (error) {
        console.error('‚ùå Error loading additional data:', error);
      }
    };

    loadAdditionalData();
  }, [bookingData]);

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –µ–¥–µ
  const saveLocalFoodItems = (bookingId, foodItems) => {
    try {
      const localFoodData = {
        bookingId: bookingId,
        items: foodItems,
        timestamp: new Date().toISOString()
      };
      
      localStorage.setItem(`local_food_${bookingId}`, JSON.stringify(localFoodData));
      console.log('üíæ Local food data saved:', localFoodData);
    } catch (error) {
      console.error('‚ùå Error saving local food data:', error);
    }
  };

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ –µ–¥—ã
  const saveFoodOrderSummary = (bookingId, cartItems, totalPrice) => {
    try {
      const orderSummary = {
        bookingId: bookingId,
        items: cartItems.map(item => ({
          name: item.name,
          food_id: item.id,
          quantity: item.quantity,
          price: item.price
        })),
        total: totalPrice,
        timestamp: new Date().toISOString()
      };
      
      localStorage.setItem(`food_order_${bookingId}`, JSON.stringify(orderSummary));
      console.log('üìã Food order summary saved for manual processing:', orderSummary);
    } catch (error) {
      console.error('‚ùå Error saving food order summary:', error);
    }
  };

  const data = bookingData || {};

  const {
    formData = {},
    selectedPlace,
    placeRate,
    cartItems = [],
    totalPrice = 0,
    calculatedData = {}
  } = data;

  const {
    place = '',
    dateFrom = '',
    timeFrom = '',
    dateTo = '',
    timeTo = '',
    address = '',
    computer_id = '',
    club_id = ''
  } = formData;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
  const getComputerInfo = (computerId) => {
    if (!computerId) return null;
    
    const computer = computers.find(c => c.id == computerId);
    if (!computer) {
      console.log(`‚ùå Computer not found for ID: ${computerId}`);
      console.log('Available computers:', computers.map(c => ({ id: c.id, name: c.name })));
      return null;
    }

    return {
      id: computer.id,
      name: computer.name || `–ö–æ–º–ø—å—é—Ç–µ—Ä ${computer.id}`,
      price: computer.price,
      processor: computer.processor,
      graphicsCard: computer.graphics_card,
      ram: computer.ram,
      monitor: computer.monitor,
      headphones: computer.headphones,
      keyboard: computer.keyboard,
      mouse: computer.mouse
    };
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—É–±–µ
  const getClubInfo = (clubId) => {
    if (!clubId) return { address: '–ù–µ —É–∫–∞–∑–∞–Ω', name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—É–±' };
    
    const club = clubs.find(c => c.id == clubId);
    if (!club) {
      console.log(`‚ùå Club not found for ID: ${clubId}`);
      return { address: `–ö–ª—É–± #${clubId}`, name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—É–±' };
    }

    return club;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –µ–¥–µ
  const getFoodInfo = (foodId) => {
    const food = foods.find(f => f.id == foodId);
    if (!food) {
      console.log(`‚ùå Food not found for ID: ${foodId}`);
      return { name: `–ü—Ä–æ–¥—É–∫—Ç #${foodId}`, price: 0 };
    }
    return food;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ
  const getPlaceInfo = (placeNumber) => {
    const placeInfo = {
      1: { type: "Gaming PC" },
      2: { type: "Gaming PC" },
      3: { type: "Gaming PC" },
      4: { type: "Gaming PC" },
      5: { type: "Streaming PC" },
      6: { type: "Competitive PC" },
      8: { type: "PlayStation 5" },
      9: { type: "PlayStation 5 Pro" },
      10: { type: "VR Station" },
      11: { type: "Audio Station" },
      12: { type: "PlayStation 4 Pro" },
      13: { type: "Nintendo Switch" },
      14: { type: "Premium Audio" }
    };
    return placeInfo[placeNumber] || { type: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ—Å—Ç–æ" };
  };

  const placeInfo = getPlaceInfo(selectedPlace);
  const actualPlaceRate = placeRate;
  const computerInfo = getComputerInfo(computer_id);
  const clubInfo = getClubInfo(club_id);

  if (loading) {
    return (
      <div className="booking-confirmation">
        <div className="container">
          <div className="loading-state">
            <h2>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...</h2>
          </div>
        </div>
      </div>
    );
  }

  if (!bookingData || !selectedPlace) {
    return (
      <div className="booking-confirmation">
        <div className="container">
          <div className="no-booking-data">
            <h2>–î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h2>
            <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ —Å–æ–∑–¥–∞–π—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.</p>
            <button 
              className="btn primary"
              onClick={() => window.location.href = '/booking'}
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
            </button>
            <button 
              className="btn secondary"
              onClick={() => window.location.href = '/'}
              style={{marginLeft: '10px'}}
            >
              –ù–∞ –≥–ª–∞–≤–Ω—É—é
            </button>
          </div>
        </div>
      </div>
    );
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formatDateDisplay = (dateString) => {
    if (!dateString) return '';
    const [year, month, day] = dateString.split('-').map(Number);
    const date = new Date(year, month - 1, day);
    
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    if (date.toDateString() === today.toDateString()) {
      return '–°–µ–≥–æ–¥–Ω—è';
    } else if (date.toDateString() === tomorrow.toDateString()) {
      return '–ó–∞–≤—Ç—Ä–∞';
    } else {
      return date.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'long',
        weekday: 'short'
      });
    }
  };

  // –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤
  const getBookingHours = () => {
    if (!dateFrom || !timeFrom || !dateTo || !timeTo) return 0;
    
    try {
      const startDateTime = new Date(`${dateFrom}T${timeFrom}`);
      const endDateTime = new Date(`${dateTo}T${timeTo}`);
      const hoursDiff = (endDateTime - startDateTime) / (1000 * 60 * 60);
      
      return Math.round(hoursDiff * 10) / 10;
    } catch (error) {
      console.error('Error calculating booking hours:', error);
      return 0;
    }
  };

  // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–µ–∑ —Å–∫–∏–¥–∫–∏
  const calculateBaseCost = () => {
    if (calculatedData && calculatedData.totalCost) {
      return calculatedData.totalCost;
    }
    
    if (!dateFrom || !timeFrom || !dateTo || !timeTo) return 0;
    
    try {
      const startDateTime = new Date(`${dateFrom}T${timeFrom}`);
      const endDateTime = new Date(`${dateTo}T${timeTo}`);
      const hours = (endDateTime - startDateTime) / (1000 * 60 * 60);
      
      const placeCost = Math.round(hours * actualPlaceRate);
      return placeCost + totalPrice;
    } catch (error) {
      console.error('Error calculating booking cost:', error);
      return totalPrice;
    }
  };

  const calculateDiscount = (baseCost) => {
    if (!appliedPromoCode) return { percent: 0, amount: 0 };
    
    const coefficient = tariffData?.coefficient || (appliedPromoCode.coefficient || 0.9);
    
    const discountPercent = Math.round((1 - coefficient) * 100);
    const discountAmount = baseCost * (1 - coefficient);
    
    return {
      percent: discountPercent,
      amount: Math.round(discountAmount)
    };
  };

  const calculateFinalCost = () => {
    const baseCost = calculateBaseCost();
    
    if (!appliedPromoCode) {
      return baseCost;
    }
    
    const discount = calculateDiscount(baseCost);
    return baseCost - discount.amount;
  };

  const bookingHours = getBookingHours();
  const baseCost = calculateBaseCost();
  const finalCost = calculateFinalCost();
  const discount = calculateDiscount(baseCost);
  const placeCost = calculatedData?.placeCost || Math.round(bookingHours * actualPlaceRate);

  const applyPromoCode = async () => {
    if (!promoCode.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥');
      return;
    }

    try {
      console.log('üîç Applying promo code:', promoCode);
      
      let promoData;
      try {
        const promoCodes = await apiService.getPromoCodes();
        promoData = promoCodes.find(p => p.code === promoCode);
        console.log('üîç Found promo code in API:', promoData);
      } catch (apiError) {
        console.log('‚ö†Ô∏è Cannot load promocodes from API, using default');
      }
      
      if (promoData) {
        setAppliedPromoCode({
          id: promoData.id,
          code: promoData.code,
          discount: promoData.discount_percent || 10,
          discount_type: 'percent',
          coefficient: promoData.coefficient || 0.9
        });
      } else {
        const coefficient = 0.9; 
        const discountPercent = Math.round((1 - coefficient) * 100);
        
        setAppliedPromoCode({
          id: 1,
          code: promoCode,
          discount: discountPercent,
          discount_type: 'percent',
          coefficient: coefficient
        });
      }
      
      alert(`–ü—Ä–æ–º–æ–∫–æ–¥ "${promoCode}" –ø—Ä–∏–º–µ–Ω–µ–Ω! –°–∫–∏–¥–∫–∞: ${appliedPromoCode?.discount || 10}%`);
      
    } catch (error) {
      console.error('Promo code error:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞');
    }
  };

  const handleEditBooking = () => {
    window.location.href = '/booking';
  };

  const handleBackToHome = () => {
  navigate('/'); 
  };

  const handlePayment = async () => {
    try {
      setProcessingPayment(true);
      
      console.log('üîÑ Creating booking in database...');
      
      const bookingMinutes = getBookingHours() * 60;
      const placeCostValue = Math.round((bookingMinutes / 60) * actualPlaceRate);
      const totalCostValue = finalCost;

      const bookingDataToSend = {
        computer_id: parseInt(computer_id) || 1,
        user_id: 1,
        club_id: parseInt(club_id) || 1,
        tariff_id: 1,
        code_id: appliedPromoCode ? appliedPromoCode.id : 1,
        start_time: `${dateFrom} ${timeFrom}:00`,
        end_time: `${dateTo} ${timeTo}:00`,
        minutes: bookingMinutes,
        price_for_pc: placeCostValue,
        price_for_additions: totalPrice,
        total_price: totalCostValue,
        status: 'pending'
      };

      console.log('üì§ Sending booking to API:', bookingDataToSend);
      
      const bookingResponse = await apiService.createBooking(bookingDataToSend);
      console.log('‚úÖ Booking created:', bookingResponse);

      console.log('üîÑ Creating payment...');
      
      const paymentData = {
        user_id: 1,
        booking_id: bookingResponse.id,
        price: totalCostValue,
        payment_type: 'card',
        status: 'pending',
        payment_hash: `pay_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        payment_date: new Date().toISOString().split('T')[0]
      };

      console.log('üì§ Sending payment to API:', paymentData);

      const paymentResponse = await apiService.createPayment(paymentData);
      console.log('‚úÖ Payment created:', paymentResponse);

      if (cartItems.length > 0) {
        console.log('üîÑ Adding food items to booking...');
        
        let foodResults = {
          success: 0,
          failed: 0,
          errors: [],
          localItems: []
        };
        
        const foodPromises = cartItems.map(async (item) => {
          try {
            console.log(`üì§ Adding food item:`, {
              booking_id: bookingResponse.id,
              food_id: item.id,
              count: item.quantity
            });
            
            const foodResponse = await apiService.addFoodToBooking(bookingResponse.id, {
              food_id: item.id,
              count: item.quantity
            });
            
            console.log(`‚úÖ Added ${item.name} to booking:`, foodResponse);
            
            if (foodResponse.local_only) {
              foodResults.localItems.push({
                name: item.name,
                food_id: item.id,
                count: item.quantity
              });
            }
            
            foodResults.success++;
            return { success: true, item: item.name, data: foodResponse };
            
          } catch (foodError) {
            console.error(`‚ùå Error adding ${item.name} to booking:`, foodError);
            foodResults.failed++;
            foodResults.errors.push({
              item: item.name,
              error: foodError.message
            });
            
            return { success: false, item: item.name, error: foodError };
          }
        });
        
        await Promise.allSettled(foodPromises);
        
        if (foodResults.localItems.length > 0) {
          saveLocalFoodItems(bookingResponse.id, foodResults.localItems);
        }
        
        saveFoodOrderSummary(bookingResponse.id, cartItems, totalPrice);
        
        let message = `–ó–∞–∫–∞–∑ –∏–∑ –∫–∞—Ñ–µ: ${foodResults.success} –∏–∑ ${cartItems.length} –ø–æ–∑–∏—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`;
        
        if (foodResults.localItems.length > 0) {
          message += `\n‚ö†Ô∏è ${foodResults.localItems.length} –ø–æ–∑–∏—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ (–æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞)`;
        }
        
        if (foodResults.errors.length > 0) {
          message += `\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å: ${foodResults.errors.length} –ø–æ–∑–∏—Ü–∏–π`;
          console.warn('Failed food items:', foodResults.errors);
        }
        
        if (foodResults.failed > 0 || foodResults.localItems.length > 0) {
          alert(message);
        } else {
          console.log(`‚úÖ All ${cartItems.length} food items added successfully`);
        }
      }

      const updatedBookingData = {
        ...bookingData,
        id: bookingResponse.id,
        payment_id: paymentResponse.id,
        status: 'pending_payment'
      };

      localStorage.setItem('lastBooking', JSON.stringify(updatedBookingData));

      alert('–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ! –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.');
      localStorage.removeItem('lastBooking');
      localStorage.removeItem('bookingStarted');
      navigate('/');

    } catch (error) {
      console.error('Payment error:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setProcessingPayment(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –æ–ø–ª–∞—Ç—ã
  const handleSimplePayment = async () => {
    try {
      setProcessingPayment(true);
      
      console.log('üîÑ Creating booking without payment...');
      
      const bookingMinutes = getBookingHours() * 60;
      const placeCostValue = Math.round((bookingMinutes / 60) * actualPlaceRate);
      const totalCostValue = finalCost;
      const bookingDataToSend = {
        computer_id: parseInt(computer_id) || 1,
        user_id: 1,
        club_id: parseInt(club_id) || 1,
        tariff_id: 1,
        code_id: appliedPromoCode ? appliedPromoCode.id : 1,
        start_time: `${dateFrom} ${timeFrom}:00`,
        end_time: `${dateTo} ${timeTo}:00`,
        minutes: bookingMinutes,
        price_for_pc: placeCostValue,
        price_for_additions: totalPrice,
        total_price: totalCostValue,
        status: 'confirmed'
      };

      console.log('üì§ Sending booking to API:', bookingDataToSend);
      
      const bookingResponse = await apiService.createBooking(bookingDataToSend);
      console.log('‚úÖ Booking created:', bookingResponse);
      if (cartItems.length > 0) {
        console.log('üîÑ Adding food items to booking...');
        
        let foodResults = {
          success: 0,
          failed: 0,
          errors: [],
          localItems: []
        };
        
        const foodPromises = cartItems.map(async (item) => {
          try {
            console.log(`üì§ Adding food item:`, {
              booking_id: bookingResponse.id,
              food_id: item.id,
              count: item.quantity
            });
            
            const foodResponse = await apiService.addFoodToBooking(bookingResponse.id, {
              food_id: item.id,
              count: item.quantity
            });
            
            console.log(`‚úÖ Added ${item.name} to booking:`, foodResponse);
            
            if (foodResponse.local_only) {
              foodResults.localItems.push({
                name: item.name,
                food_id: item.id,
                count: item.quantity
              });
            }
            
            foodResults.success++;
            return { success: true, item: item.name, data: foodResponse };
            
          } catch (foodError) {
            console.error(`‚ùå Error adding ${item.name} to booking:`, foodError);
            foodResults.failed++;
            foodResults.errors.push({
              item: item.name,
              error: foodError.message
            });
            
            return { success: false, item: item.name, error: foodError };
          }
        });
        
        await Promise.allSettled(foodPromises);
        
        if (foodResults.localItems.length > 0) {
          saveLocalFoodItems(bookingResponse.id, foodResults.localItems);
        }
        
        saveFoodOrderSummary(bookingResponse.id, cartItems, totalPrice);
        
        let message = `–ó–∞–∫–∞–∑ –∏–∑ –∫–∞—Ñ–µ: ${foodResults.success} –∏–∑ ${cartItems.length} –ø–æ–∑–∏—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`;
        
        if (foodResults.localItems.length > 0) {
          message += `\n‚ö†Ô∏è ${foodResults.localItems.length} –ø–æ–∑–∏—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ (–æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞)`;
        }
        
        if (foodResults.errors.length > 0) {
          message += `\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å: ${foodResults.errors.length} –ø–æ–∑–∏—Ü–∏–π`;
          console.warn('Failed food items:', foodResults.errors);
        }
        
        if (foodResults.failed > 0 || foodResults.localItems.length > 0) {
          alert(message);
        } else {
          console.log(`‚úÖ All ${cartItems.length} food items added successfully`);
        }
      }

      alert('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ! –ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏: ' + bookingResponse.id);
      localStorage.removeItem('lastBooking');
      localStorage.removeItem('bookingStarted');
      navigate('/');

    } catch (error) {
      console.error('Booking creation error:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setProcessingPayment(false);
    }
  };
const handleMockPayment = () => {
  const { number, expiry, cvv } = cardData;

  // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
  if (number.replace(/\s/g, '').length !== 16) {
    setCardError('–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 16 —Ü–∏—Ñ—Ä');
    return;
  }
  if (!/^\d{2}\/\d{2}$/.test(expiry)) {
    setCardError('–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú/–ì–ì');
    return;
  }
  if (cvv.length !== 3) {
    setCardError('CVV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 —Ü–∏—Ñ—Ä—ã');
    return;
  }

  setProcessingPayment(true);
  setCardError('');

  // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
  setTimeout(() => {
    setProcessingPayment(false);
    setPaymentSuccess(true);

    // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –±—Ä–æ–Ω—å
    setTimeout(() => {
      alert('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏: CYB-2025-' + Math.floor(1000 + Math.random() * 9000));
      localStorage.removeItem('lastBooking');
      localStorage.removeItem('bookingStarted');
      navigate('/');
    }, 2000);
  }, 1500);
};
  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–µ
  const renderPromoCodeInfo = () => {
    if (!appliedPromoCode) return null;

    return (
      <div className="promo-code-applied">
        <span>‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥: {appliedPromoCode.code}</span>
        {appliedPromoCode.discount && (
          <span> (–°–∫–∏–¥–∫–∞: {appliedPromoCode.discount}%)</span>
        )}
      </div>
    );
  };
  console.log('üîç Current state:', {
    bookingData: !!bookingData,
    foodsCount: foods.length,
    computersCount: computers.length,
    clubsCount: clubs.length,
    tariffData: !!tariffData,
    computerInfo: !!computerInfo,
    clubInfo: !!clubInfo
  });

  return (
    <div className="booking-confirmation">
      <div className="background-container">
        <img src="/images/67f504fdfc00ad2f7d384258d27391b08ef7aabd.png" alt="Abstract background" className="bg-image" />
        <div className="bg-overlay"></div>
      </div>

      <div className="container">
        <div className="confirmation-header">
          <h1>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h1>
          <p className="confirmation-subtitle">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π</p>
        </div>

        <div className="confirmation-content">
          <div className="booking-info">
            <div className="info-section">
              <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏</h2>
              
              <div className="info-grid">
                <div className="info-item">
                  <span className="info-label">–ú–µ—Å—Ç–æ:</span>
                  <span className="info-value">–ú–µ—Å—Ç–æ ‚Ññ{place} ({placeInfo.type})</span>
                </div>
                
                {computerInfo && (
                  <>
                    <div className="info-item">
                      <span className="info-label">–ö–æ–º–ø—å—é—Ç–µ—Ä:</span>
                      <span className="info-value">{computerInfo.name}</span>
                    </div>
                    <div className="info-item">
                      <span className="info-label">–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:</span>
                      <span className="info-value">{computerInfo.processor || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                    </div>
                    <div className="info-item">
                      <span className="info-label">–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞:</span>
                      <span className="info-value">{computerInfo.graphicsCard || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</span>
                    </div>
                  </>
                )}
                
                <div className="info-item">
                  <span className="info-label">–¢–∞—Ä–∏—Ñ:</span>
                  <span className="info-value">{actualPlaceRate} ‚ÇΩ/—á–∞—Å</span>
                </div>
                
                <div className="info-item">
                  <span className="info-label">–ö–ª—É–±:</span>
                  <span className="info-value">{clubInfo.address || address}</span>
                </div>
                
                <div className="info-item">
                  <span className="info-label">–ù–∞—á–∞–ª–æ:</span>
                  <span className="info-value">
                    {formatDateDisplay(dateFrom)} {timeFrom}
                  </span>
                </div>
                
                <div className="info-item">
                  <span className="info-label">–û–∫–æ–Ω—á–∞–Ω–∏–µ:</span>
                  <span className="info-value">
                    {formatDateDisplay(dateTo)} {timeTo}
                  </span>
                </div>
                
                <div className="info-item">
                  <span className="info-label">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
                  <span className="info-value">
                    {bookingHours > 0 ? `${bookingHours} —á–∞—Å–æ–≤` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                  </span>
                </div>
              </div>
            </div>

            {/* –ü—Ä–æ–º–æ–∫–æ–¥ */}
            <div className="info-section">
              <h2>–ü—Ä–æ–º–æ–∫–æ–¥</h2>
              <div className="promo-code-section">
                <input
                  type="text"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥"
                  value={promoCode}
                  onChange={(e) => setPromoCode(e.target.value)}
                  className="promo-code-input"
                />
                <button 
                  onClick={applyPromoCode}
                  className="btn secondary"
                >
                  –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                </button>
              </div>
              {renderPromoCodeInfo()}
            </div>

            {cartItems.length > 0 && (
              <div className="info-section">
                <h2>–ó–∞–∫–∞–∑ –∏–∑ –∫–∞—Ñ–µ ({cartItems.length} –ø–æ–∑–∏—Ü–∏–π)</h2>
                <div className="cart-items-list">
                  {cartItems.map(item => {
                    const foodInfo = getFoodInfo(item.id);
                    return (
                      <div key={item.id} className="cart-item-confirm">
                        <span className="item-name">{foodInfo.name}</span>
                        <span className="item-quantity">x{item.quantity}</span>
                        <span className="item-price">{foodInfo.price * item.quantity} ‚ÇΩ</span>
                      </div>
                    );
                  })}
                </div>
              </div>
            )}
          </div>

          <div className="payment-section">
            <div className="payment-card">
              <h3>–°—Ç–æ–∏–º–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
              
              <div className="cost-breakdown">
                <div className="cost-item">
                  <span>–ê—Ä–µ–Ω–¥–∞ –º–µ—Å—Ç–∞ ({bookingHours} —á–∞—Å–æ–≤ √ó {actualPlaceRate} ‚ÇΩ/—á–∞—Å):</span>
                  <span>{placeCost} ‚ÇΩ</span>
                </div>
                
                {cartItems.length > 0 && (
                  <div className="cost-item">
                    <span>–ó–∞–∫–∞–∑ –∏–∑ –∫–∞—Ñ–µ:</span>
                    <span>{totalPrice} ‚ÇΩ</span>
                  </div>
                )}

                {appliedPromoCode && discount.amount > 0 && (
                  <>
                    <div className="cost-item discount">
                      <span>–°–∫–∏–¥–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É ({appliedPromoCode.discount}%):</span>
                      <span>-{discount.amount} ‚ÇΩ</span>
                    </div>
                    <div className="cost-item original-price">
                      <span>–ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                      <span className="strikethrough">{baseCost} ‚ÇΩ</span>
                    </div>
                  </>
                )}
                
                <div className="cost-total">
                  <span>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</span>
                  <span className="total-amount">{finalCost} ‚ÇΩ</span>
                </div>
              </div>

              <div className="payment-actions">
                {!showPaymentForm ? (
  <button 
    className="btn payment-btn primary"
    onClick={() => setShowPaymentForm(true)}
    disabled={processingPayment}
  >
    –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ {finalCost} ‚ÇΩ
  </button>
) : (
  <div className="mock-payment-form">
    <h4>–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π</h4>
    
    {cardError && <div className="payment-error">{cardError}</div>}
    {paymentSuccess && (
      <div className="payment-success">
        ‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.
      </div>
    )}

    {!paymentSuccess && (
      <>
        <div className="form-group">
          <label>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã</label>
          <input
            type="text"
            placeholder="1234 5678 9012 3456"
            value={cardData.number}
            onChange={(e) => {
              let v = e.target.value.replace(/\D/g, '').replace(/(.{4})/g, '$1 ').trim();
              setCardData(prev => ({ ...prev, number: v }));
              setCardError('');
            }}
            maxLength={19}
            className="card-input"
          />
        </div>

        <div className="form-row">
          <div className="form-group">
            <label>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è</label>
            <input
              type="text"
              placeholder="–ú–ú/–ì–ì"
              value={cardData.expiry}
              onChange={(e) => {
                let v = e.target.value.replace(/\D/g, '');
                if (v.length >= 2) v = v.slice(0, 2) + '/' + v.slice(2, 4);
                setCardData(prev => ({ ...prev, expiry: v }));
                setCardError('');
              }}
              maxLength={5}
              className="expiry-input"
            />
          </div>
          <div className="form-group">
            <label>CVV</label>
            <input
              type="password"
              placeholder="123"
              value={cardData.cvv}
              onChange={(e) => {
                let v = e.target.value.replace(/\D/g, '').slice(0, 3);
                setCardData(prev => ({ ...prev, cvv: v }));
                setCardError('');
              }}
              maxLength={3}
              className="cvv-input"
            />
          </div>
        </div>

        <div className="form-group">
          <label>–ë–∞–Ω–∫-—ç–º–∏—Ç–µ–Ω—Ç</label>
          <select
            value={cardData.bank}
            onChange={(e) => setCardData(prev => ({ ...prev, bank: e.target.value }))}
            className="bank-select"
          >
            <option value="sberbank">–°–±–µ—Ä–±–∞–Ω–∫</option>
            <option value="tinkoff">–¢–∏–Ω—å–∫–æ—Ñ—Ñ</option>
            <option value="vtb">–í–¢–ë</option>
            <option value="alfa">–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫</option>
            <option value="gazprom">–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫</option>
            <option value="raiffeisen">–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω</option>
          </select>
        </div>

        <div className="payment-actions-row">
          <button
            type="button"
            className="btn secondary"
            onClick={() => setShowPaymentForm(false)}
          >
            –ù–∞–∑–∞–¥
          </button>
          <button
            type="button"
            className="btn primary"
            onClick={handleMockPayment}
            disabled={processingPayment}
          >
            {processingPayment ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–û–ø–ª–∞—Ç–∏—Ç—å'}
          </button>
        </div>
      </>
    )}
  </div>
)}
                
                <button 
                  className="btn secondary"
                  onClick={handleSimplePayment}
                  disabled={processingPayment}
                  style={{marginTop: '10px'}}
                >
                  {processingPayment ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω—å –±–µ–∑ –æ–ø–ª–∞—Ç—ã (—Ç–µ—Å—Ç)'}
                </button>
                
                <button 
                  className="btn secondary"
                  onClick={handleEditBooking}
                  disabled={processingPayment}
                >
                  –ò–∑–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å
                </button>
                <button 
                  className="btn secondary"
                  onClick={handleBackToHome}
                  disabled={processingPayment}
                >
                  –ù–∞ –≥–ª–∞–≤–Ω—É—é
                </button>
              </div>

              <div className="payment-security">
                <div className="security-info">
                  <span className="security-icon">üîí</span>
                  <span>–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CloudPayments</span>
                </div>
                <p className="security-note">
                  –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ email –∏ —Å–º—Å
                </p>
              </div>
            </div>

            <div className="support-info">
              <h4>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</h4>
              <p>–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∏: +7 (999) 123-45-67</p>
              <p>Email: support@cyberclub.ru</p>
            </div>
          </div>
        </div>

        {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="debug-info" style={{
          background: 'rgba(255,255,255,0.1)',
          padding: '15px',
          borderRadius: '8px',
          marginTop: '20px',
          color: 'white',
          fontSize: '12px'
        }}>
          <strong>üîß –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong><br/>
          - –î–∞–Ω–Ω—ã–µ –∏–∑ localStorage: {bookingData ? '‚úÖ' : '‚ùå'}<br/>
          - –ó–∞–≥—Ä—É–∂–µ–Ω–æ –±–ª—é–¥: {foods.length}<br/>
          - –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤: {computers.length}<br/>
          - –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–ª—É–±–æ–≤: {clubs.length}<br/>
          - –¢–∞—Ä–∏—Ñ: {tariffData ? '‚úÖ' : '‚ùå'}<br/>
          - –ò–Ω—Ñ–æ –æ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ: {computerInfo ? '‚úÖ' : '‚ùå'}<br/>
          - –ò–Ω—Ñ–æ –æ –∫–ª—É–±–µ: {clubInfo ? '‚úÖ' : '‚ùå'}
        </div>
      </div>
    </div>
  );
};

export default BookingConfirmation;